description: |
  Simple drop-in job to setup a python project, run tests and store the test results if possible.
  If test-tool is pytest, the job assumes the project defines pytest in the dependency file.
  Otherwise, use the built in unittest module as the test-tool.

parameters:
  executor:
    type: executor
    default: default
    description: |
      The name of executor to use.
  pkg-manager:
    type: enum
    enum: [auto, pip, pipenv, poetry, pip-dist]
    default: "auto"
    description: Select the package manager to use. Default is pip
  pip-dependency-file:
    type: string
    default: requirements.txt
    description: Name of the requirements file that needs to be installed with pip. Prepended with `app-dir`. If using pipenv or poetry, this is ignored.
  app-dir:
    type: string
    default: "~/project"
    description: Path to the directory containing your python project. Not needed if dependency file lives in the root.
  setup-file-path:
    type: string
    default: ""
    description: Path to the setup.py file.
  module-src-dir:
    type: string
    default: "src"
    description: Path relative to app-dir which contains module source.
  args:
    type: string
    default: ""
    description: Arguments to pass to install command for pipenv and poetry. Override '-r requirements.txt' for pip.
  setup:
    type: steps
    description: Provide any optional steps you would like to run prior to install the python project.
    default: []
  test-tool:
    type: enum
    enum: ["pytest", "unittest"]
    default: "pytest"
    description: The tool to run the tests with.
  test-tool-args:
    type: string
    default: ""
    description: Arguments to pass to test tool, i.e. discovery settings for unittest - 'discover -s tests_dir'.
  venv-cache:
    type: boolean
    default: true
    description: Use the lockfile to cache the virtualenv. Not used with pip as pkg-manager.
  pypi-cache:
    type: boolean
    default: true
    description: Keep all versions of pypi and site-package caches for faster rebuilding overall.
  cache-version:
    type: string
    default: v1
    description: Change the default cache version if you need to clear the cache for any reason.
  include-branch-in-cache-key:
    type: boolean
    default: true
    description: >
      If true, this cache bucket will only apply to jobs within the same branch.
  include-python-in-cache-key:
    type: boolean
    default: true
    description: >
      If true, this cache bucket will checksum the pyenv python version with the cache-key
  fail-if-missing-tool:
    type: boolean
    default: false
    description: >
      If true, this job will fail if the test tool was not found. If false, it will automatically install to recover.
  ensure-test-tool:
    type: boolean
    default: true
    description: >
      If true, a step will be ran to ensure the configured test tool is installed.
  pre-install-steps:
    type: steps
    default: []
    description: >
      Steps needed between restoring the cache and the install step.

executor: <<parameters.executor>>

steps:
  - checkout
  - steps: << parameters.setup >>
  - install-packages:
      app-dir: <<parameters.app-dir>>
      pkg-manager: <<parameters.pkg-manager>>
      cache-version: <<parameters.cache-version>>
      pypi-cache: <<parameters.pypi-cache>>
      venv-cache: <<parameters.venv-cache>>
      pre-install-steps: <<parameters.pre-install-steps>>
      include-branch-in-cache-key: <<parameters.include-branch-in-cache-key>>
      args: <<parameters.args>>
      pip-dependency-file: <<parameters.pip-dependency-file>>
      include-python-in-cache-key: <<parameters.include-python-in-cache-key>>
  - when:
      condition: <<parameters.ensure-test-tool>>
      steps:
        - run:
            working_directory: <<parameters.app-dir>>
            name: Ensuring test tool is installed
            command: <<include(scripts/ensure-test-tool.sh)>>
            environment:
              PARAM_PKG_MNGR: <<parameters.pkg-manager>>
              PARAM_SETUP_FILE_PATH: <<parameters.setup-file-path>>>
              PARAM_TEST_TOOL: <<parameters.test-tool>>
              PARAM_FAIL_IF_MISSING_TOOL: <<parameters.fail-if-missing-tool>>>
  - when:
      condition:
        equal: [auto, << parameters.pkg-manager >>]
      steps:
        - run:
            name: Create test-report directory
            working_directory: <<parameters.app-dir>>
            command: mkdir test-report
        - run:
            name: Run tests with auto-detected packages run
            working_directory: <<parameters.app-dir>>
            environment:
              PYTHONPATH: << parameters.app-dir >>/<< parameters.module-src-dir >>
              PARAM_PKG_MNGR: <<parameters.pkg-manager>>
              PARAM_TEST_TOOL_ARGS: <<parameters.test-tool-args>>
              PARAM_TEST_TOOL: <<parameters.test-tool>>
            command: <<include(scripts/auto-test-command.sh)>>
        - store_test_results:
            path: <<#parameters.app-dir>><<parameters.app-dir>>/<</parameters.app-dir>>test-report
  - when:
      condition:
        and:
          - equal: ["unittest", << parameters.test-tool >>]
          - not:
              equal: [auto, << parameters.pkg-manager >>]
      steps:
        - when:
            condition:
              or:
                - equal: [poetry, << parameters.pkg-manager >>]
                - equal: [pipenv, << parameters.pkg-manager >>]
            steps:
              - run:
                  name: Run tests with <<parameters.pkg-manager>> run
                  command: <<parameters.pkg-manager>> run python -m unittest << parameters.test-tool-args >>
        - when:
            condition:
              or:
                - equal: [pip, << parameters.pkg-manager >>]
                - equal: [pip-dist, << parameters.pkg-manager >>]
            steps:
              - run:
                  working_directory: <<parameters.app-dir>>
                  name: Run tests with global python env
                  environment:
                    PYTHONPATH: << parameters.app-dir >>/<< parameters.module-src-dir >>
                  command: python -m unittest << parameters.test-tool-args >>
  - when:
      condition:
        and:
          - equal: ["pytest", << parameters.test-tool >>]
          - not:
              equal: [auto, << parameters.pkg-manager >>]
      steps:
        - run:
            name: Create test-report directory
            working_directory: <<parameters.app-dir>>
            command: mkdir test-report
        - when:
            condition:
              or:
                - equal: [poetry, << parameters.pkg-manager >>]
                - equal: [pipenv, << parameters.pkg-manager >>]
            steps:
              - run:
                  name: Run tests with <<parameters.pkg-manager>> run
                  working_directory: <<parameters.app-dir>>
                  command: <<parameters.pkg-manager>> run pytest --junit-xml=test-report/report.xml << parameters.test-tool-args >>
        - when:
            condition:
              or:
                - equal: [pip, << parameters.pkg-manager >>]
                - equal: [pip-dist, << parameters.pkg-manager >>]
            steps:
              - run:
                  name: Run tests with global python env
                  working_directory: <<parameters.app-dir>>
                  environment:
                    PYTHONPATH: << parameters.app-dir >>/<< parameters.module-src-dir >>
                  command: pytest --junit-xml=test-report/report.xml << parameters.test-tool-args >>
        - store_test_results:
            path: <<#parameters.app-dir>><<parameters.app-dir>>/<</parameters.app-dir>>test-report
