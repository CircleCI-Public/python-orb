description: >
  Setup a python environment and install the packages for your project either globally with pip or in a virtualenv with poetry or pipenv.
  With pip as pkg-manager, the command will assume `-r requirements.txt`.
  With poetry as pkg-manager, the command will assume `--no-ansi`.
  For pipenv, no args are provided. Expect the default caching locations for packages and virtualenvs on a debian system with pyenv.

parameters:
  cache-key-override:
    type: string
    default: ""
    description: |
      Override the built-in cache key. If set, this value will be used as the cache key for restore_cache/save_cache steps.
      You can use CircleCI template functions, e.g.:
        cache-key-override: "pip-{{ checksum 'dev-requirements.txt' }}-{{ checksum 'requirements.txt' }}"
      If not set, the default cache key logic will be used.
  pkg-manager:
    type: enum
    enum: [auto, poetry, pipenv, pip, pip-dist, uv]
    default: auto
    description: Which package management tool to use, pipenv, pip or poetry with dependency file. Use `pip-dist` to install with project setup.py or PEP621 (pyproject.toml).
  path-args:
    type: string
    default: "."
    description: |
      If using `pip-dist` these are the arguments after the command `pip install -e` that is by default set to `.`.  Use of this parameter allows
      for multiple paths to be specified.  This is important when extra paths are required to install extra packages referenced via `extras_requires`.
  args:
    type: string
    default: ""
    description: |
      Arguments to pass to install command for pipenv and poetry. For pip, arguments are after the command, `pip install -r requirements.txt <args>`.
      For poetry, args are after `--no-ansi` as output option.
  pip-dependency-file:
    type: string
    default: requirements.txt
    description: |
      Name of the requirements file that needs to be installed with pip. Prepended with `app-dir`. If using pipenv or poetry, this is ignored.
      If using `pip-dist`, use this to use the cache checksum against the `setup.py` or `pyproject.toml` if desired.
      If `pip-dependency-file` is set to an empty string, no dependency file is used in the `pip install` command.
  app-dir:
    type: string
    default: "."
    description: Path to the directory containing your python project. Not needed if dependency file lives in the root.
  no_output_timeout:
    type: string
    default: "10m"
    description: Elapsed time the command can run without output. Passed to install command.
  venv-cache:
    type: boolean
    default: true
    description: Use the lockfile to cache the virtualenv. Not used with pip as pkg-manager.
  pypi-cache:
    type: boolean
    default: true
    description: Keep all versions of pypi and site-package caches for faster rebuilding overall.
  venv-path:
    type: string
    default: ""
    description: Override venv path. As json array - ex '[ "path", "path2" ]'
  cache-version:
    type: string
    default: v1
    description: Change the default cache version if you need to clear the cache for any reason.
  include-branch-in-cache-key:
    type: boolean
    default: true
    description: >
      If true, this cache bucket will only apply to jobs within the same branch.
  pre-install-steps:
    type: steps
    default: []
    description: >
      Steps needed between restoring the cache and the install step.
  include-python-in-cache-key:
    type: boolean
    default: true
    description: >
      If true, this cache bucket will checksum the pyenv python version with the cache-key.
  cache-folder-prefix:
    type: string
    default: "/tmp/cache"
    description: |
      A directory where you would like to save the cache files. Defaults to empty, saving the cache to project folder.
      If you don't want the cache in your project directory, specify the absolute path of an existing directory here.

steps:
  - run:
      name: "Export automatic environment detection script"
      command: << include(scripts/export-detect-env.sh) >>
  - run:
      name: Alias Python
      command: <<include(scripts/alias-python.sh)>>
  # restore caches
  - when:
      condition:
        or:
          - << parameters.pypi-cache >>
          - << parameters.venv-cache >>
      steps:
        - run:
            name: Link lockfile
            environment:
              PARAM_PKG_MNGR: << parameters.pkg-manager >>
              PARAM_DEPENDENCY_FILE: << parameters.pip-dependency-file >>
              PARAM_PYPI_CACHE: << parameters.pypi-cache >>
              PARAM_VENV_CACHE: << parameters.venv-cache >>
              PARAM_VENV_PATH: << parameters.venv-path >>
              PARAM_CACHE_FOLDER_PREFIX: <<parameters.cache-folder-prefix>>
              PARAM_APP_DIR: <<parameters.app-dir>>
              SCRIPT_UTILS: "<<include(scripts/utils.sh)>>"
            command: <<include(scripts/cache-link-lockfile.sh)>>
            working_directory: << parameters.app-dir >>
        - run:
            name: Save python version
            environment:
              PARAM_CACHE_FOLDER_PREFIX: <<parameters.cache-folder-prefix>>
              PARAM_APP_DIR: <<parameters.app-dir>>
              SCRIPT_UTILS: "<<include(scripts/utils.sh)>>"
            working_directory: << parameters.app-dir >>
            command: <<include(scripts/save-python-version.sh)>>
        - restore_cache:
            keys:
              - <<#parameters.cache-key-override>><<parameters.cache-key-override>><</parameters.cache-key-override>><<^parameters.cache-key-override>><<parameters.cache-version>>-cci_pycache-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<#parameters.include-python-in-cache-key>>{{ checksum "<<parameters.cache-folder-prefix>>/.temp-python-version" }}-<</parameters.include-python-in-cache-key>>{{ checksum "<<parameters.cache-folder-prefix>>/.cci_pycache/lockfile" }}<</parameters.cache-key-override>>
              - <<^parameters.cache-key-override>><<parameters.cache-version>>-cci_pycache-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<#parameters.include-python-in-cache-key>>{{ checksum "<<parameters.cache-folder-prefix>>/.temp-python-version" }}-<</parameters.include-python-in-cache-key>><</parameters.cache-key-override>>
        - run:
            name: Move restored cache
            working_directory: << parameters.app-dir >>
            environment:
              PARAM_PYPI_CACHE: << parameters.pypi-cache >>
              PARAM_VENV_CACHE: << parameters.venv-cache >>
              PARAM_CACHE_FOLDER_PREFIX: <<parameters.cache-folder-prefix>>
              PARAM_APP_SRC_DIR: <<parameters.app-dir>>
              SCRIPT_UTILS: "<<include(scripts/utils.sh)>>"
            command: <<include(scripts/cache-restore.sh)>>
  # run install steps
  - steps: <<parameters.pre-install-steps>>
  - when:
      condition:
        equal: [auto, << parameters.pkg-manager >>]
      steps:
        - run:
            name: "Install dependencies with automatically determined project package manager"
            working_directory: << parameters.app-dir >>
            no_output_timeout: << parameters.no_output_timeout >>
            environment:
              PARAM_PKG_MNGR: << parameters.pkg-manager >>
              PARAM_DEPENDENCY_FILE: << parameters.pip-dependency-file >>
              PARAM_PATH_ARGS: << parameters.path-args >>
              PARAM_ADDITIONAL_ARGS: << parameters.args >>
            command: <<include(scripts/auto-install-command.sh)>>
  - when:
      condition:
        equal: [pipenv, << parameters.pkg-manager >>]
      steps:
        - run:
            name: "Install dependencies with pipenv using project Pipfile or inline packages"
            no_output_timeout: << parameters.no_output_timeout >>
            working_directory: << parameters.app-dir >>
            command: |
              pipenv install << parameters.args >>
  - when:
      condition:
        equal: [poetry, << parameters.pkg-manager >>]
      steps:
        - run:
            name: "Install dependencies with poetry using project pyproject.toml"
            no_output_timeout: << parameters.no_output_timeout >>
            working_directory: << parameters.app-dir >>
            command: |
              poetry install --no-ansi << parameters.args >>
  - when:
      condition:
        equal: [uv, << parameters.pkg-manager >>]
      steps:
        - run:
            name: "Install dependencies with uv using project pyproject.toml and uv.lock"
            no_output_timeout: << parameters.no_output_timeout >>
            working_directory: << parameters.app-dir >>
            command: |
              uv sync << parameters.args >>
  - when:
      condition:
        # if pip == pkgmanager and args != "" or pip-dependency-file != ""
        and:
          - equal: [pip, << parameters.pkg-manager >>]
          - or:
              # true if no arguments
              - <<parameters.args>>
              # true if dep file
              - <<parameters.pip-dependency-file>>
      steps:
        - run:
            name: "Install dependencies with pip using project <<parameters.pip-dependency-file>>"
            no_output_timeout: << parameters.no_output_timeout >>
            working_directory: <<parameters.app-dir>>
            command: |
              pip install <<#parameters.pip-dependency-file>>-r <<parameters.pip-dependency-file>><</parameters.pip-dependency-file>> << parameters.args >>
  - when:
      condition:
        equal: [pip-dist, << parameters.pkg-manager >>]
      steps:
        - run:
            name: "Install dependencies with pip using project setup.py or pyproject.toml"
            no_output_timeout: << parameters.no_output_timeout >>
            working_directory: <<parameters.app-dir>>
            command: |
              pip install -e << parameters.path-args >> << parameters.args >>
  - when:
      condition:
        or:
          - << parameters.pypi-cache >>
          - << parameters.venv-cache >>
      steps:
        - run:
            name: Copy to cache directory
            working_directory: << parameters.app-dir >>
            environment:
              PARAM_PKG_MNGR: << parameters.pkg-manager >>
              PARAM_DEPENDENCY_FILE: << parameters.pip-dependency-file >>
              PARAM_VENV_CACHE: << parameters.venv-cache >>
              PARAM_PYPI_CACHE: << parameters.pypi-cache >>
              PARAM_VENV_PATH: << parameters.venv-path >>
              PARAM_CACHE_FOLDER_PREFIX: <<parameters.cache-folder-prefix>>
              PARAM_APP_SRC_DIR: <<parameters.app-dir>>
              SCRIPT_UTILS: "<<include(scripts/utils.sh)>>"
            command: <<include(scripts/cache-save.sh)>>
        - save_cache:
            key: <<#parameters.cache-key-override>><<parameters.cache-key-override>><</parameters.cache-key-override>><<^parameters.cache-key-override>><<parameters.cache-version>>-cci_pycache-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>><<#parameters.include-python-in-cache-key>>{{ checksum "<<parameters.cache-folder-prefix>>/.temp-python-version" }}-<</parameters.include-python-in-cache-key>>{{ checksum "<<parameters.cache-folder-prefix>>/.cci_pycache/lockfile" }}<</parameters.cache-key-override>>
            paths:
              - <<parameters.cache-folder-prefix>>/.cci_pycache
