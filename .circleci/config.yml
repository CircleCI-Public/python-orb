version: 2.1

orbs:
  python: circleci/python@<<pipeline.parameters.dev-orb-version>>
  orb-tools: circleci/orb-tools@9.1

# Pipeline parameters
parameters:
  # These pipeline parameters are required by the "trigger-integration-tests-workflow"
  # job, by default.
  run-integration-tests:
    type: boolean
    default: false
  dev-orb-version:
    type: string
    default: "dev:alpha"

jobs:
  pip-install-test:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/sample
      - run:
          name: "Test"
          workding_directory: ~/project/sample
          command: |
            ls -l
            # pytest would be a dep in requirements.txt
            pytest

  uninstall-deps-test:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/sample
          pypi-cache: false
      - run:
          name: "Test"
          command: |
            pytest --version
      - python/uninstall-deps:
          package-names: pytest
      - run:
          name: "Test"
          command: |
            pytest --version || echo "successfully uninstalled"

  dist-test:
    executor: python/default
    steps:
      - checkout
      - run:
          name: Create setup.py to test dist command
          command: |
            echo 'import setuptools; setuptools.setup(name="tmp-example",version="0.0.1",author="null",author_email="null",url="null",description="null")' > setup.py
      - python/dist

  pipenv-test:
    executor: python/default
    steps:
      - run:
          name: Create Pipfile for test
          command: echo $'[packages]\npytest = "*"' > Pipfile
      - python/install-packages:
          cache-version: v2
      - run:
          command: |
            cp Pipfile.lock Pipfile.lock.tmp
            cp Pipfile Pipfile.tmp
            pipenv run pytest --version
          name: Ensure pipenv is working and copy lock file for cache testing
      - run: pipenv install pytest==4.6.1
      - run:
          command: |
            cp Pipfile.lock.tmp Pipfile.lock
            cp Pipfile.tmp Pipfile
          name: Overwrite the lockfile with the one that should load the cache.
      - python/install-packages:
          cache-version: v2
      - run:
          command: pipenv run pytest --version

  poetry-test:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          app-dir: ~/project/sample
          pkg-manager: poetry
      - run:
          working_directory: ~/project/sample
          command: |
            poetry run pytest

workflows:
  # This `lint-pack_validate_publish-dev` workflow will run on any commit.
  lint_pack-validate_publish-dev:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint
      # pack your orb YAML files to a single orb.yml
      # validate the orb.yml file to ensure it is well-formed
      - orb-tools/pack:
          requires:
            - orb-tools/lint

      - orb-tools/publish-dev:
          orb-name: circleci/python
          context: orb-publishing
          requires:
            - orb-tools/pack

      # trigger an integration workflow to test the
      # dev:${CIRCLE_SHA1:0:7} version of your orb
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          context: orb-publishing
          requires:
            - orb-tools/publish-dev

  # This `integration-tests_prod-release` workflow will only run
  # when the run-integration-tests pipeline parameter is set to true.
  # It is meant to be triggered by the "trigger-integration-tests-workflow"
  # job, and run tests on <your orb>@dev:${CIRCLE_SHA1:0:7}.
  integration-tests_prod-release:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      - pip-install-test
      - pipenv-test
      - poetry-test
      - dist-test
      - uninstall-deps-test
      - python/test:
          name: job-test-poetry
          pkg-manager: poetry
          test-tool: pytest
          app-dir: ~/project/sample
      - python/test:
          name: job-test-pipenv
          pkg-manager: pipenv
          args: pytest
          test-tool: pytest
          app-dir: ~/project/sample
      - python/test:
          name: job-test-pip
          pkg-manager: pip
          app-dir: ~/project/sample
      # publish a semver version of the orb. relies on
      # the commit subject containing the text "[semver:patch|minor|major|skip]"
      # as that will determine whether a patch, minor or major
      # version will be published or if publishing should
      # be skipped.
      # e.g. [semver:patch] will cause a patch version to be published.
      - orb-tools/dev-promote-prod-from-commit-subject:
          orb-name: circleci/python
          context: orb-publishing
          add-pr-comment: true
          fail-if-semver-not-indicated: true
          publish-version-tag: true
          bot-token-variable: GHI_TOKEN
          bot-user: cpe-bot
          ssh-fingerprints: 1a:d8:ea:eb:7a:ae:0c:9d:eb:e9:37:0f:66:62:36:9b
          requires:
            - pip-install-test
            - pipenv-test
            - poetry-test
            - job-test-poetry
            - job-test-pipenv
            - job-test-pip
            - dist-test
            - uninstall-deps-test
          filters:
            branches:
              only: master
