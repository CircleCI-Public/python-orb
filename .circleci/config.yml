version: 2.1

orbs:
  python: circleci/python@<<pipeline.parameters.dev-orb-version>>
  orb-tools: circleci/orb-tools@10.0

# Pipeline parameters
parameters:
  # These pipeline parameters are required by the "trigger-integration-tests-workflow"
  # job, by default.
  run-integration-tests:
    type: boolean
    default: false
  dev-orb-version:
    type: string
    default: "dev:alpha"
  cache-version:
    type: string
    default: v8

jobs:
  pip-install-test:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          cache-version: << pipeline.parameters.cache-version >>
          app-dir: ~/project/sample_pip
      - run:
          name: "Test"
          working_directory: ~/project/sample_pip
          command: |
            pytest

  pip-install-test-no-packages:
    executor: python/default
    steps:
      - checkout
      - run:
          name: "Test"
          working_directory: ~/project/sample_pip
          command: |
            pytest

  pip-install-test-args:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/sample_pip
          cache-version: << pipeline.parameters.cache-version >>
          args: pytest
          pip-dependency-file: ""
      - run:
          name: "Test"
          working_directory: ~/project/sample_pip
          command: |
            pytest

  dist-test:
    executor: python/default
    steps:
      - checkout
      - python/dist:
          app-dir: ~/project/sample_pip

  pipenv-test:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          app-dir: ~/project/sample_pipenv
          pkg-manager: "pipenv"
          cache-version: << pipeline.parameters.cache-version >>
      - run:
          working_directory: ~/project/sample_pipenv
          command: |
            cp Pipfile.lock Pipfile.lock.tmp
            cp Pipfile Pipfile.tmp
            pipenv run pytest --version
          name: Ensure pipenv is working and copy lock file for cache testing
      - run:
          command: pipenv install pytest==4.6.1
          working_directory: ~/project/sample_pipenv
      - run:
          working_directory: ~/project/sample_pipenv
          command: |
            cp Pipfile.lock.tmp Pipfile.lock
            cp Pipfile.tmp Pipfile
          name: Overwrite the lockfile with the one that should load the cache.
      - python/install-packages:
          app-dir: ~/project/sample_pipenv
          pkg-manager: "pipenv"
          pypi-cache: false
          venv-cache: false
          cache-version: << pipeline.parameters.cache-version >>
      - run:
          command: pipenv run pytest
          working_directory: ~/project/sample_pipenv

  poetry-test:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          app-dir: ~/project/sample_poetry
          cache-version: << pipeline.parameters.cache-version >>
          pkg-manager: poetry
      - run:
          working_directory: ~/project/sample_poetry
          command: |
            poetry run pytest

workflows:
  # This `lint-pack_validate_publish-dev` workflow will run on any commit.
  lint_pack-validate_publish-dev:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint
      # pack your orb YAML files to a single orb.yml
      # validate the orb.yml file to ensure it is well-formed
      - orb-tools/pack:
          requires:
            - orb-tools/lint

      - orb-tools/publish-dev:
          orb-name: circleci/python
          context: orb-publishing
          requires:
            - orb-tools/pack

      # trigger an integration workflow to test the
      # dev:${CIRCLE_SHA1:0:7} version of your orb
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          context: orb-publishing
          requires:
            - orb-tools/publish-dev

  # This `integration-tests_prod-release` workflow will only run
  # when the run-integration-tests pipeline parameter is set to true.
  # It is meant to be triggered by the "trigger-integration-tests-workflow"
  # job, and run tests on <your orb>@dev:${CIRCLE_SHA1:0:7}.
  integration-tests_prod-release:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      - pip-install-test
      - pip-install-test-args
      - pipenv-test
      - poetry-test
      - dist-test
      - python/test:
          name: job-test-poetry
          pkg-manager: poetry
          cache-version: poetry-<< pipeline.parameters.cache-version >>
          args: "| tee install_output.txt"
          app-dir: ~/project/sample_poetry
          post-steps:
            - run:
                name: Verify cache was successful
                working_directory: ~/project/sample_poetry
                command: 'cat install_output.txt | grep "No dependencies to install or update"'
      - python/test:
          name: job-test-pipenv
          pkg-manager: pipenv
          cache-version: pipenv-<< pipeline.parameters.cache-version >>
          args: pytest -v | tee install_output.txt
          app-dir: ~/project/sample_pipenv
          post-steps:
            - run:
                name: Verify cache was successful
                working_directory: ~/project/sample_pipenv
                command: 'cat install_output.txt | grep "Since it is already installed"'
      - python/test:
          name: job-test-pip
          pkg-manager: pip
          cache-version: pip-<< pipeline.parameters.cache-version >>
          test-tool: unittest
          app-dir: ~/project/sample_pip
          args: "| tee install_output.txt"
          post-steps:
            - run:
                name: Verify cache was successful
                working_directory: ~/project/sample_pip
                command: 'cat install_output.txt | grep "Requirement already satisfied: pytest"'
      - python/test:
          name: job-auto-test-poetry
          cache-version: poetry-auto-<< pipeline.parameters.cache-version >>
          args: "| tee install_output.txt"
          app-dir: ~/project/sample_poetry
          post-steps:
            - run:
                name: Verify cache was successful
                working_directory: ~/project/sample_poetry
                command: 'cat install_output.txt | grep "No dependencies to install or update"'
      - python/test:
          name: job-auto-test-pipenv
          args: pytest -v | tee install_output.txt
          cache-version: pipenv-auto-<< pipeline.parameters.cache-version >>
          app-dir: ~/project/sample_pipenv
          post-steps:
            - run:
                name: Verify cache was successful
                working_directory: ~/project/sample_pipenv
                command: 'cat install_output.txt | grep "Since it is already installed"'
      - python/test:
          name: job-auto-test-pip
          test-tool: unittest
          venv-cache: false
          args: "| tee install_output.txt"
          cache-version: pip-auto-<< pipeline.parameters.cache-version >>
          app-dir: ~/project/sample_pip
          post-steps:
            - run:
                name: Verify cache was successful
                working_directory: ~/project/sample_pip
                command: 'cat install_output.txt | grep "Requirement already satisfied: pytest"'
      - python/test:
          name: job-test-pip-no-reqs
          pkg-manager: pip
          pip-dependency-file: ""
          test-tool: unittest
          cache-version: pip-noreqs-<< pipeline.parameters.cache-version >>
          app-dir: ~/project/sample_pip
      - python/test:
          version: 3.8.2
          name: job-test-pip-dist
          pkg-manager: pip-dist
          cache-version: pip-dist-<< pipeline.parameters.cache-version >>
          app-dir: ~/project/sample_pip
          # pip-dependency-file: setup.py
          post-steps:
            - run:
                name: Attempt to set the other python version - this should fail, but if the cache is broken, this will succeed.
                command: |
                  ! pyenv local 3.8.6
            - run:
                name: If another python version is loaded - its broken - this verifies that it's broken
                when: on_fail
                command: python --version
      # publish a semver version of the orb. relies on
      # the commit subject containing the text "[semver:patch|minor|major|skip]"
      # as that will determine whether a patch, minor or major
      # version will be published or if publishing should
      # be skipped.
      # e.g. [semver:patch] will cause a patch version to be published.
      - orb-tools/dev-promote-prod-from-commit-subject:
          orb-name: circleci/python
          context: orb-publishing
          add-pr-comment: true
          fail-if-semver-not-indicated: true
          publish-version-tag: true
          bot-token-variable: GHI_TOKEN
          bot-user: orb-publisher
          ssh-fingerprints: a3:57:82:bf:38:55:a7:9b:69:7b:d0:79:8f:fa:61:01
          requires:
            - pip-install-test
            - pip-install-test-args
            - pipenv-test
            - poetry-test
            - job-test-poetry
            - job-test-pipenv
            - job-test-pip
            - job-auto-test-poetry
            - job-auto-test-pipenv
            - job-auto-test-pip
            - dist-test
          filters:
            branches:
              only: master
